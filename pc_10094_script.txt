
                # top stack elements is the start root, push it to altstack for later
                OP_TOALTSTACK
        
        940001 # pc

        # pc inclusion
        
        # on stack is merkle proof for pc register. We already know the location in RAM, so only
        # nodes are needed.
        
        # On stack is element checked for inclusion, and path.
        # Hash element
        OP_SHA256
        OP_CAT OP_SHA256
OP_CAT OP_SHA256
OP_CAT OP_SHA256
OP_CAT OP_SHA256
OP_CAT OP_SHA256
OP_SWAP
OP_CAT OP_SHA256
OP_CAT OP_SHA256
OP_CAT OP_SHA256
OP_SWAP
OP_CAT OP_SHA256
OP_SWAP
OP_CAT OP_SHA256
OP_SWAP
OP_CAT OP_SHA256
OP_SWAP
OP_CAT OP_SHA256
OP_SWAP
OP_CAT OP_SHA256
OP_SWAP
OP_CAT OP_SHA256
OP_SWAP
OP_CAT OP_SHA256
OP_SWAP
OP_CAT OP_SHA256
OP_SWAP
OP_CAT OP_SHA256
OP_SWAP
OP_CAT OP_SHA256
OP_SWAP
OP_CAT OP_SHA256
OP_SWAP
OP_CAT OP_SHA256
OP_SWAP
OP_CAT OP_SHA256
OP_SWAP
OP_CAT OP_SHA256
OP_SWAP
OP_CAT OP_SHA256
OP_SWAP
OP_CAT OP_SHA256
OP_CAT OP_SHA256
OP_SWAP
OP_CAT OP_SHA256

        
        OP_FROMALTSTACK
OP_DUP
        
        OP_SWAP OP_TOALTSTACK
        # Check that it matches root.
        OP_EQUALVERIFY
        

        # rs2 on stack
        OP_DUP OP_TOALTSTACK
        # rs2 inclusion inclusion
        
        # on stack is merkle proof for pc register. We already know the location in RAM, so only
        # nodes are needed.
        
        # On stack is element checked for inclusion, and path.
        # Hash element
        OP_SHA256
        OP_CAT OP_SHA256
OP_CAT OP_SHA256
OP_CAT OP_SHA256
OP_SWAP
OP_CAT OP_SHA256
OP_CAT OP_SHA256
OP_CAT OP_SHA256
OP_CAT OP_SHA256
OP_CAT OP_SHA256
OP_SWAP
OP_CAT OP_SHA256
OP_SWAP
OP_CAT OP_SHA256
OP_SWAP
OP_CAT OP_SHA256
OP_SWAP
OP_CAT OP_SHA256
OP_SWAP
OP_CAT OP_SHA256
OP_SWAP
OP_CAT OP_SHA256
OP_SWAP
OP_CAT OP_SHA256
OP_SWAP
OP_CAT OP_SHA256
OP_SWAP
OP_CAT OP_SHA256
OP_SWAP
OP_CAT OP_SHA256
OP_SWAP
OP_CAT OP_SHA256
OP_SWAP
OP_CAT OP_SHA256
OP_SWAP
OP_CAT OP_SHA256
OP_SWAP
OP_CAT OP_SHA256
OP_SWAP
OP_CAT OP_SHA256
OP_SWAP
OP_CAT OP_SHA256
OP_CAT OP_SHA256
OP_SWAP
OP_CAT OP_SHA256

        
        OP_FROMALTSTACK
        OP_FROMALTSTACK
OP_DUP
        
        OP_SWAP OP_TOALTSTACK
        OP_SWAP OP_TOALTSTACK
        # Check that it matches root.
        OP_EQUALVERIFY
        

        # rs1 on stack
        OP_DUP OP_TOALTSTACK
        # rs1 inclusion inclusion
        
        # on stack is merkle proof for pc register. We already know the location in RAM, so only
        # nodes are needed.
        
        # On stack is element checked for inclusion, and path.
        # Hash element
        OP_SHA256
        OP_CAT OP_SHA256
OP_SWAP
OP_CAT OP_SHA256
OP_CAT OP_SHA256
OP_CAT OP_SHA256
OP_CAT OP_SHA256
OP_CAT OP_SHA256
OP_CAT OP_SHA256
OP_CAT OP_SHA256
OP_SWAP
OP_CAT OP_SHA256
OP_SWAP
OP_CAT OP_SHA256
OP_SWAP
OP_CAT OP_SHA256
OP_SWAP
OP_CAT OP_SHA256
OP_SWAP
OP_CAT OP_SHA256
OP_SWAP
OP_CAT OP_SHA256
OP_SWAP
OP_CAT OP_SHA256
OP_SWAP
OP_CAT OP_SHA256
OP_SWAP
OP_CAT OP_SHA256
OP_SWAP
OP_CAT OP_SHA256
OP_SWAP
OP_CAT OP_SHA256
OP_SWAP
OP_CAT OP_SHA256
OP_SWAP
OP_CAT OP_SHA256
OP_SWAP
OP_CAT OP_SHA256
OP_SWAP
OP_CAT OP_SHA256
OP_SWAP
OP_CAT OP_SHA256
OP_CAT OP_SHA256
OP_SWAP
OP_CAT OP_SHA256

        
        OP_FROMALTSTACK
        OP_FROMALTSTACK
        OP_FROMALTSTACK
OP_DUP
        
        OP_SWAP OP_TOALTSTACK
        OP_SWAP OP_TOALTSTACK
        OP_SWAP OP_TOALTSTACK
        # Check that it matches root.
        OP_EQUALVERIFY
        
        
        # on witness is binary encoding of memory index (including imm), calculate rs1 from it to
        #check that it matches.
        OP_0

                OP_SWAP
                OP_IF
                01 OP_ADD
                OP_ENDIF
            
                OP_SWAP
                OP_IF
                02 OP_ADD
                OP_ENDIF
            
                OP_SWAP
                OP_IF
                04 OP_ADD
                OP_ENDIF
            
                OP_SWAP
                OP_IF
                08 OP_ADD
                OP_ENDIF
            
                OP_SWAP
                OP_IF
                10 OP_ADD
                OP_ENDIF
            
                OP_SWAP
                OP_IF
                20 OP_ADD
                OP_ENDIF
            
                OP_SWAP
                OP_IF
                40 OP_ADD
                OP_ENDIF
            
                OP_SWAP
                OP_IF
                8000 OP_ADD
                OP_ENDIF
            
                OP_SWAP
                OP_IF
                0001 OP_ADD
                OP_ENDIF
            
                OP_SWAP
                OP_IF
                0002 OP_ADD
                OP_ENDIF
            
                OP_SWAP
                OP_IF
                0004 OP_ADD
                OP_ENDIF
            
                OP_SWAP
                OP_IF
                0008 OP_ADD
                OP_ENDIF
            
                OP_SWAP
                OP_IF
                0010 OP_ADD
                OP_ENDIF
            
                OP_SWAP
                OP_IF
                0020 OP_ADD
                OP_ENDIF
            
                OP_SWAP
                OP_IF
                0040 OP_ADD
                OP_ENDIF
            
                OP_SWAP
                OP_IF
                008000 OP_ADD
                OP_ENDIF
            
                OP_SWAP
                OP_IF
                000001 OP_ADD
                OP_ENDIF
            
                OP_SWAP
                OP_IF
                000002 OP_ADD
                OP_ENDIF
            
                OP_SWAP
                OP_IF
                000004 OP_ADD
                OP_ENDIF
            
                OP_SWAP
                OP_IF
                000008 OP_ADD
                OP_ENDIF
            
                OP_SWAP
                OP_IF
                000010 OP_ADD
                OP_ENDIF
            
                OP_SWAP
                OP_IF
                000020 OP_ADD
                OP_ENDIF
            
                OP_SWAP
                OP_IF
                000040 OP_ADD
                OP_ENDIF
            
                OP_SWAP
                OP_IF
                00008000 OP_ADD
                OP_ENDIF
            
                OP_SWAP
                OP_IF
                00000001 OP_ADD
                OP_ENDIF
            
                OP_SWAP
                OP_IF
                00000002 OP_ADD
                OP_ENDIF
            
                # now check that the number from binary equals the opcode memory address
                # multiply by 4
                OP_DUP OP_ADD
                OP_DUP OP_ADD

                # add address offset.
                0004 OP_ADD

                #subtract imm
                18 OP_SUB
                OP_FROMALTSTACK # rs1 from altstck
                OP_EQUALVERIFY
                OP_1
            